1.
CREATE SCHEMA LibraryManagement;
USE LibraryManagement;

CREATE TABLE authors (
authors_id INT AUTO_INCREMENT PRIMARY KEY,
author_name VARCHAR (45)
);

CREATE TABLE genres (
genre_id INT AUTO_INCREMENT PRIMARY KEY,
genre_name VARCHAR (45)
);

CREATE TABLE books (
book_id INT AUTO_INCREMENT PRIMARY KEY,
title VARCHAR (45),
publication_year YEAR,
author_id INT,
FOREIGN KEY (author_id) REFERENCES authors(authors_id),
genre_id INT,
FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);

CREATE TABLE users (
user_id INT AUTO_INCREMENT PRIMARY KEY,
username VARCHAR (45),
email VARCHAR(45)
);

CREATE TABLE borrowed_books (
borrow_id INT AUTO_INCREMENT PRIMARY KEY,
book_id INT,
FOREIGN KEY (book_id) REFERENCES books(book_id),
user_id INT,
FOREIGN KEY (user_id) REFERENCES users(user_id),
borrow_date DATE,
return_date DATE
);

2.
USE librarymanagement;

INSERT INTO authors (author_name)
VALUES ('J.K. Rowling'), ('George Orwell'), ('Agatha Christie');

INSERT INTO genres (genre_name)
VALUES ('Fantasy'), ('Dystopian'), ('Mystery');

INSERT INTO books (title, publication_year, author_id, genre_id)
VALUES ('Harry Potter and the Philosopher\'s Stone', 1997, 1, 1), 
('1984', 1949, 2, 2), ('Murder on the Orient Express', 1934, 3, 3);

INSERT INTO users (username, email)
VALUES ('Oleksandr Semeniuta', 'semenyutaaa@gmail.com'), ('Sem Aa', 'sem@mail.com'), 
('Oleksandr Orel', 'orel@mail.com');

INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date)
VALUES (1, 1, '2024-06-20', '2024-07-20'), (2, 2, '2024-06-18', '2024-07-18'), 
(3, 3, '2024-06-19', '2024-07-19');

3.
USE dev;

SELECT * FROM order_details 
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id 
INNER JOIN suppliers ON products.supplier_id = suppliers.id
INNER JOIN categories ON products.category_id = categories.id 

4.1.
USE dev;

SELECT COUNT(*) FROM order_details 
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id 
INNER JOIN suppliers ON products.supplier_id = suppliers.id
INNER JOIN categories ON products.category_id = categories.id 

4.2
USE dev;

SELECT COUNT(*) AS qnt_rows FROM order_details 
RIGHT JOIN orders ON order_details.order_id = orders.id
LEFT JOIN products ON order_details.product_id = products.id
RIGHT JOIN customers ON orders.customer_id = customers.id
LEFT JOIN employees ON orders.employee_id = employees.employee_id
LEFT JOIN shippers ON orders.shipper_id = shippers.id 
LEFT JOIN suppliers ON products.supplier_id = suppliers.id
LEFT JOIN categories ON products.category_id = categories.id 

Якщо об'єднуемо таблиці через JOIN будуть повертатится тільки ті строки які перетинаються в обох таблицях, 
при об'єднані через LEFT або RIGHT будуть додаватися строки з лівої (LEFT) або правої (RIGHT) таблиці, а пусті строки буде додаватися null

4.3
USE dev;

SELECT COUNT(*) AS qnt_rows FROM order_details 
RIGHT JOIN orders ON order_details.order_id = orders.id
LEFT JOIN products ON order_details.product_id = products.id
RIGHT JOIN customers ON orders.customer_id = customers.id
LEFT JOIN employees ON orders.employee_id = employees.employee_id
LEFT JOIN shippers ON orders.shipper_id = shippers.id 
LEFT JOIN suppliers ON products.supplier_id = suppliers.id
LEFT JOIN categories ON products.category_id = categories.id 
WHERE orders.employee_id > 3 AND orders.employee_id < 10

4.4 
USE dev;

SELECT 
	categories.name AS category_name,
	COUNT(*) AS number_of_rows,
	AVG(order_details.quantity) AS average_quantity 
FROM order_details

INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name;

4.5 
USE dev;

SELECT 
	categories.name AS category_name,
	COUNT(*) AS number_of_rows,
	AVG(order_details.quantity) AS average_quantity 
FROM order_details

INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY category_name
HAVING average_quantity > 21

4.6
USE dev;

SELECT 
	categories.name AS category_name,
	COUNT(*) AS number_of_rows,
	AVG(order_details.quantity) AS average_quantity 
FROM order_details

INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY category_name
HAVING average_quantity > 21
ORDER BY number_of_rows DESC

4.7
SELECT 
	categories.name AS category_name,
	COUNT(*) AS number_of_rows,
	AVG(order_details.quantity) AS average_quantity 
FROM order_details

INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY category_name
HAVING average_quantity > 21
ORDER BY number_of_rows DESC
LIMIT 4 OFFSET 1





